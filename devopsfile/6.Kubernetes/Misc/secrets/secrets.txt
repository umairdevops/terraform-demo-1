Agenda:
---
. Why to use Secrets & Use-cases 
. What is a Secret
. How to Implement Secret
----------------

#1)
Why to use Secrets & Use-cases?
--
1. Your containerized application contains some sensitive data like username/password, ssh keys, authentication tokens ..etc. and you don't want to put them in .yaml configuration files

2. Applicatin may need client certificate file to communicate to other service.

3. You don't want to push such sensitive data in your Docker images

4. You don't want to hard-code your applicatin configurations. Instead, pass them dynamically when pods/containers get created. example.. application server configuration files, database authentications, environment details, passwords.properties ..etc



Question - How do you reduce the risk of accidental exposure of confidential information.
		   How do you manage sensitive data like Keys, username/password's, tokens ..etc. in Kubernetes?


#2)
What is a Secret?
--
Kubernetes Secret is an Object that let you store and manage small amount of sensitive information, such as passwords, OAuth tokens, and ssh keys ..etc.


#3)
How to Implement a Secret and Consume in Kubernetes?
--
Overview:
	. Using Secrets, we can secure small amount of sensitive data Keys, username/password's, tokens ..etc.
	. Reduces risk of exposing sensitive data

	. Secrets are stored outside of the pods/containers. Usually if we want some information to be available in 
	  containers, we write that in Pod manifest file. What if it is sensitive.. that's where we think about Secrets. Once secrets are created, you can consume it in any number of pods/containers
	  
	. We need to create the secret before we consume in the cluster
	
	. Stored inside Etcd database on Kubernetes Master
	
	. Size limit 1 MB

#
Secret Types
--
There are multiple Secret types. For example we have..,
	Generic 						- User defined key value pairs which can be created from file/dir/command line
	Docker-registry secret 			- To store the credentials for accessing a Docker registry for images
	TLS secret 						- For storing a certificate and its associated key that are typically used for TLS
	SSH authentication secret 		- For storing keys used in SSH authentication
	
#
There are two ways to create Secrets in Kubernetes
	1. Using kubectl CLI
	2. Using .yaml configuration files
	
1. Using kubectl CLI
Syntax: kubectl create secret [TYPE] [NAME] [DATA]

$ kubectl create secret generic nginx-creds --from-literal=username=admin --from-literal=password=123abc
$ kubectl get secrets
	NAME                  TYPE              DATA   AGE
	nginx-creds           Opaque            2      47s
$ kubectl describe secret nginx-creds

2. Using .yaml configuration files
- before creating secret using .yaml configuration file, it's good practice to first encrypt the values using base64, so that others can't see the values in the .yaml file.
	
	$ echo -n admin | base64
		YWRtaW4=
	$ echo -n 123abc | base64
		MTIzYWJj
	
- Now, lets create .yaml file and place these encrypted values for username and password keys.
$ vim nginx-credentials.yaml
--
apiVersion: v1
kind: Secret
metadata:
  name: nginx-credentials
type: Opaque
data:
  username: YWRtaW4=
  password: MTIzYWJj

- Execute 'nginx-credentials.yaml' using kubectl command
	$ kubectl create -f nginx-credentials.yaml
		secret/nginx-credentials created
	$ kubectl get secrets
		NAME                  TYPE                                  DATA   AGE
		nginx-credentials     Opaque                                2      74s

#
Using Secrets inside the pods OR Consuming Secrets in pods OR Injecting Secrets in pods
There are different ways using which you can consume or inject Secrets in the pods
	1. Injecting Secrets as Volumes in the pods
	2. Injecting Secrets as Environment variables in the pod
	
1. Injecting Secrets as Volumes in the pods

- create configuration file to mount the 'nginx-credentials' Secret into the pod so that pod container can consume/use it
vim nginx-pod-volume.yaml
--
apiVersion: v1
kind: Pod
metadata:
  name: test-pd
spec:
  containers:
  - image: nginx
    name: test-container
    volumeMounts:
    - name: nginx-credentials-vol
      mountPath: /etc/nginx-credentials
      readOnly: true
  volumes:
  - name: nginx-credentials-vol
    secret:
      secretName: nginx-credentials

- execute the configuration file to create the pod
	$ kubectl get pods
		NAME      READY   STATUS    RESTARTS   AGE
		test-pd   1/1     Running   0          3m29s
- login into the pod to check if the Secret is mounted at '/etc/nginx-credentials' as specified in the configuration 
  file. If you see below, there are two files called 'username' and 'password' with decrypted values. Our nginx application can read username fron 'username' and password from 'password' file. For each key that we defined in the Secret configuration file 'nginx-credentials.yaml' above, it creates files.

	$ kubectl exec -it test-pd -- /bin/bash
	$ cd /etc/nginx-credentials
	$ ls
		password  username
	$ cat username
		admin
	$ cat password
		123abc

2. Injecting Secrets as Environment variables in the pod. When the Kubernetes creates the pod, it refers the Secret 'nginx-credentials' and sets environment variables called USERNAME and PASSWORD with valued 'admin' and '123abc'

- Create pod configuration file to create the pod to consume the Secret 'nginx-credentials'
$ vim nginx-pod-env.yaml
apiVersion: v1
kind: Pod
metadata:
  name: test-pd-env
spec:
  containers:
  - image: nginx
    name: test-container
    env:
      - name: USERNAME
        valueFrom:
          secretKeyRef:
            name: nginx-credentials
            key: username
      - name: PASSWORD
        valueFrom:
          secretKeyRef:
            name: nginx-credentials
            key: password

- Execute the configuration file to create the pod
	$ kubectl create -f nginx-pod-env.yaml
	$ kubectl get pods
		NAME          READY   STATUS    RESTARTS   AGE
		test-pd-env   1/1     Running   0          6s
		
- Login into the pod to check if Environment variables are exposed or created.
	$ kubectl exec -it test-pd-env -- /bin/bash
	
	$ env | grep USERNAME              
		USERNAME=admin
	$ env | grep PASSWORD
		PASSWORD=123abc
	
#
Decoding secrets
$ echo 'YWRtaW4=' | base64 --decode
admin
$ echo 'MTIzYWJj' | base64 --decode
123abc

#
Overriging a file in the pod/container OR bundling a configuration file in the secret and injecting into a pod container at a particular location.
apiVersion: v1
kind: Secret
metadata:
  name: nginx-credentials
type: Opaque
data:
  nginx.conf: |
    c2VydmVyLW5hbWU9d3d3LXNlcnZlci1uYW1l
	cG9ydD04MA==

